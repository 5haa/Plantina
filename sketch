#include <AFMotor.h>
#include <Wire.h>
#include <NewPing.h>  // For better ultrasonic sensor readings
#include <Servo.h>    // Add Servo library for waving
#include <avr/pgmspace.h> // For PROGMEM

// Pin definitions
#define TRIG_PIN A0     // Ultrasonic sensor trigger pin
#define ECHO_PIN A1     // Ultrasonic sensor echo pin
#define MOISTURE_PIN A2 // Moisture sensor pin
#define SERVO_PIN 10    // Servo 1 on Adafruit Motor Shield

// Thresholds and constants
#define MOISTURE_THRESHOLD 300   // Adjust based on your sensor (lower = drier)
#define OBSTACLE_DISTANCE 35     // Increased distance to detect obstacles earlier (cm)
#define MAXIMUM_DISTANCE 200     // Maximum distance to detect (cm)
#define TURN_DELAY 800           // Time to turn in milliseconds
#define BACKWARD_DELAY 500       // Time to move backward in milliseconds
#define PERSON_APPROACH_DISTANCE 70 // Distance to stop approaching person (cm)

// Robot states
#define STATE_WAITING_FOR_CAMERA 0  // Waiting for camera to initialize
#define STATE_IDLE 1                // Plant doesn't need water, stay still
#define STATE_MOVING 2              // Plant needs water, moving around
#define STATE_APPROACHING_PERSON 3  // Approaching detected person

// Person direction constants
#define DIRECTION_NONE 0
#define DIRECTION_LEFT 1
#define DIRECTION_CENTER 2
#define DIRECTION_RIGHT 3

// Initialize motors
AF_DCMotor motor1(1);
AF_DCMotor motor2(2);
AF_DCMotor motor3(3);
AF_DCMotor motor4(4);

// Initialize servo for waving
Servo waveServo;
const int8_t WAVE_START_POS    = 90;    // Center position
const int8_t WAVE_LEFT_POS     = 45;    // Left wave position
const int8_t WAVE_RIGHT_POS    = 135;   // Right wave position
const uint16_t WAVE_DURATION = 3000; // Wave for 3 seconds
bool isWaving            = false;   // Flag to indicate if waving is active
uint32_t waveStartTime  = 0;       // To track waving duration
uint32_t lastWaveTime   = 0;       // For wave motion timing

// Initialize ultrasonic sensor
NewPing sonar(TRIG_PIN, ECHO_PIN, MAXIMUM_DISTANCE);

// Variables
uint16_t distance               = 100;     // Current distance to obstacle
bool goesForward          = false;   // Flag for forward movement
uint16_t moistureValue         = 0;       // Current moisture reading
bool plantNeedsWater      = false;   // Flag for water status
uint8_t robotState            = STATE_WAITING_FOR_CAMERA;  // Current robot state
bool cameraInitialized    = false;   // Flag for camera initialization
bool personDetected       = false;   // Flag for person detection
uint8_t personCommandReceived = 0;       // Counter for person detection signals
uint8_t personDirection       = DIRECTION_NONE; // Direction of detected person
bool approachingComplete  = false;   // Flag to indicate if approaching is complete

// Timing
uint32_t lastObstacleTime    = 0;
uint32_t lastPersonDebugTime = 0;
const uint16_t PERSON_DEBUG_INTERVAL = 1000; // 1 s
uint32_t lastSensorDataSent  = 0;
const uint16_t SENSOR_DATA_INTERVAL   = 1000; // 1 s
uint32_t lastStateChangeTime = 0;     // Time of last state change
uint32_t startTime           = 0;     // For tracking elapsed time

char command;  // For reading serial commands

// Function to get elapsed time as a string (reduced memory usage version)
void printElapsedTime() {
  uint32_t elapsedSeconds = millis() / 1000;
  uint8_t minutes = elapsedSeconds / 60;
  uint8_t seconds = elapsedSeconds % 60;
  Serial.print(F("["));
  if (minutes < 10) Serial.print(F("0"));
  Serial.print(minutes);
  Serial.print(F(":"));
  if (seconds < 10) Serial.print(F("0"));
  Serial.print(seconds);
  Serial.print(F("] "));
}

void setup() {
  Serial.begin(9600);
  startTime = millis();

  // Initialize motors
  motor1.setSpeed(0); motor1.run(RELEASE);
  motor2.setSpeed(0); motor2.run(RELEASE);
  motor3.setSpeed(0); motor3.run(RELEASE);
  motor4.setSpeed(0); motor4.run(RELEASE);

  // Initialize servo
  waveServo.attach(SERVO_PIN);
  waveServo.write(WAVE_START_POS);

  // Random seed
  randomSeed(analogRead(A3));

  // Warm up ping
  distance = readPing();
  delay(100);
  distance = readPing();
  delay(100);

  printElapsedTime();
  Serial.println(F("================================================="));
  printElapsedTime();
  Serial.println(F("********** ROBOT INITIALIZATION COMPLETE **********"));
  printElapsedTime();
  Serial.println(F("================================================="));
  printElapsedTime();
  Serial.println(F("PERSON DETECTION DEBUG ENABLED"));
  printElapsedTime();
  Serial.print(F("Serial buffer size: "));
  Serial.println(SERIAL_RX_BUFFER_SIZE);
  printElapsedTime();
  Serial.println(F("Waiting for camera initialization..."));
}

void loop() {
  uint32_t now = millis();

  // Process serial commands (may set cameraInitialized or personDetected)
  checkSerialCommands();

  // Read sensors
  readMoistureSensor();
  distance = readPing();
  
  // Debug distance readings (reduced frequency)
  if (now % 3000 < 10) {
    printElapsedTime();
    Serial.print(F("DISTANCE: "));
    Serial.print(distance);
    Serial.println(F(" cm"));
  }

  // Periodic debug of person detection (reduced frequency)
  if (now - lastPersonDebugTime >= PERSON_DEBUG_INTERVAL) {
    lastPersonDebugTime = now;
    
    printElapsedTime();
    Serial.println(F("---------------------------------------------"));
    printElapsedTime();
    Serial.println(F("### ROBOT STATUS REPORT ###"));
    printElapsedTime();
    Serial.print(F("PERSON: "));
    Serial.print(personDetected ? F("DETECTED") : F("NOT DETECTED"));
    printElapsedTime();
    
    Serial.print(F("DIRECTION: "));
    switch (personDirection) {
      case DIRECTION_LEFT: Serial.println(F("LEFT")); break;
      case DIRECTION_CENTER: Serial.println(F("CENTER")); break;
      case DIRECTION_RIGHT: Serial.println(F("RIGHT")); break;
      default: Serial.println(F("NONE")); break;
    }
    
    printElapsedTime();
    Serial.print(F("STATE: "));
    switch (robotState) {
      case STATE_WAITING_FOR_CAMERA: Serial.println(F("WAITING_FOR_CAMERA")); break;
      case STATE_IDLE: Serial.println(F("IDLE")); break;
      case STATE_MOVING: Serial.println(F("MOVING")); break;
      case STATE_APPROACHING_PERSON: Serial.println(F("APPROACHING_PERSON")); break;
      default: Serial.println(F("UNKNOWN")); break;
    }
    
    printElapsedTime();
    Serial.print(F("MOISTURE: "));
    Serial.print(moistureValue);
    Serial.println(plantNeedsWater ? F(" (NEEDS WATER)") : F(" (Water OK)"));
  }

  // Periodic sensor data send (reduced frequency)
  if (now - lastSensorDataSent >= SENSOR_DATA_INTERVAL) {
    lastSensorDataSent = now;
    Serial.print(F("SENSOR:"));
    Serial.print(moistureValue);
    Serial.print(F(":"));
    Serial.print(distance);
    Serial.print(F(":"));
    Serial.print(robotState);
    Serial.print(F(":"));
    Serial.println(personDetected ? F("1") : F("0"));
  }

  // Waving logic - only wave after approaching is complete
  if (personDetected && approachingComplete && !isWaving) {
    startWaving();
  }
  if (isWaving) {
    updateWaving(now);
  }

  // Force state transition to approaching if person is detected
  if (personDetected && robotState != STATE_APPROACHING_PERSON && !approachingComplete) {
    printElapsedTime();
    Serial.println(F("!!! PERSON DETECTED - INITIATING APPROACH !!!"));
    changeState(STATE_APPROACHING_PERSON);
  }

  // State machine
  switch (robotState) {
    case STATE_WAITING_FOR_CAMERA:
      moveStop();
      if (cameraInitialized) {
        changeState(STATE_IDLE);
      }
      break;

    case STATE_IDLE:
      moveStop();
      if (plantNeedsWater && cameraInitialized && !personDetected) {
        changeState(STATE_MOVING);
      } else if (personDetected && !approachingComplete) {
        approachingComplete = false;
        changeState(STATE_APPROACHING_PERSON);
      }
      break;

    case STATE_MOVING:
      if (personDetected) {
        approachingComplete = false;
        changeState(STATE_APPROACHING_PERSON);
        break;
      }
      if (!plantNeedsWater || !cameraInitialized) {
        changeState(STATE_IDLE);
        break;
      }
      if (distance <= OBSTACLE_DISTANCE) {
        avoidObstacle();
      } else {
        moveForward();
      }
      break;
      
    case STATE_APPROACHING_PERSON:
      if (!personDetected) {
        approachingComplete = false;
        changeState(STATE_IDLE);
        break;
      }
      
      if (distance <= PERSON_APPROACH_DISTANCE && distance > 0) {
        moveStop();
        approachingComplete = true;
        break;
      }
      
      approachPerson();
      break;
  }

  delay(10);
}

void approachPerson() {
  if (distance <= PERSON_APPROACH_DISTANCE && distance > 0) {
    moveStop();
    approachingComplete = true;
    return;
  }
  
  switch (personDirection) {
    case DIRECTION_LEFT:
      turnLeft();
      delay(300);
      moveForward();
      break;
      
    case DIRECTION_RIGHT:
      turnRight();
      delay(300);
      moveForward();
      break;
      
    case DIRECTION_CENTER:
    default:
      moveForward();
      break;
  }
}

void checkSerialCommands() {
  while (Serial.available() > 0) {
    command = Serial.read();

    switch (command) {
      case 'P':
      case 'p':
        personDetected = true;
        personDirection = DIRECTION_CENTER;
        personCommandReceived++;
        approachingComplete = false;
        if (robotState != STATE_APPROACHING_PERSON) {
          changeState(STATE_APPROACHING_PERSON);
        }
        break;

      case 'L':
      case 'l':
        personDetected = true;
        personDirection = DIRECTION_LEFT;
        personCommandReceived++;
        approachingComplete = false;
        if (robotState != STATE_APPROACHING_PERSON) {
          changeState(STATE_APPROACHING_PERSON);
        }
        break;

      case 'R':
      case 'r':
        personDetected = true;
        personDirection = DIRECTION_RIGHT;
        personCommandReceived++;
        approachingComplete = false;
        if (robotState != STATE_APPROACHING_PERSON) {
          changeState(STATE_APPROACHING_PERSON);
        }
        break;

      case 'N':
        personDetected = false;
        personDirection = DIRECTION_NONE;
        approachingComplete = false;
        break;

      case 'I':
        if (!cameraInitialized) {
          cameraInitialized = true;
        }
        break;

      case 'X':
        cameraInitialized = false;
        break;

      case 'F':
        moveForward();
        break;

      case 'B':
        moveBackward();
        break;

      case 'T':
        turnLeft();
        break;

      case 'Y':
        turnRight();
        break;

      case 'S':
        moveStop();
        break;

      default:
        break;
    }
  }
}

void startWaving() {
  printElapsedTime();
  Serial.println(F("********** STARTING WAVING MOTION **********"));
  
  isWaving = true;
  waveStartTime = millis();
  lastWaveTime = millis();
  waveServo.write(WAVE_START_POS);
}

void updateWaving(uint32_t currentTime) {
  if (currentTime - waveStartTime >= WAVE_DURATION) {
    isWaving = false;
    waveServo.write(WAVE_START_POS);
    printElapsedTime();
    Serial.println(F("*** WAVING COMPLETE ***"));
    return;
  }
  
  if (currentTime - lastWaveTime >= 200) {
    lastWaveTime = currentTime;
    if ((currentTime / 200) % 2 == 0) {
      waveServo.write(WAVE_LEFT_POS);
    } else {
      waveServo.write(WAVE_RIGHT_POS);
    }
  }
}

void avoidObstacle() {
  if (personDetected) {
    moveStop();
    return;
  }
  
  moveStop();
  delay(300);
  
  moveBackward();
  delay(BACKWARD_DELAY);
  
  moveStop();
  delay(300);

  // Always turn right instead of random turning
  turnRight();

  moveStop();
  delay(200);
}

int readPing() {
  delay(70);
  int cm = sonar.ping_cm();
  if (cm == 0) {
    return MAXIMUM_DISTANCE;
  }
  return cm;
}

void readMoistureSensor() {
  moistureValue = analogRead(MOISTURE_PIN);
  plantNeedsWater = (moistureValue < MOISTURE_THRESHOLD);
  
  // Only log significant moisture changes
  static int lastMoistureValue = -1;
  if (abs(moistureValue - lastMoistureValue) > 20) {
    printElapsedTime();
    Serial.print(F("MOISTURE: "));
    Serial.print(moistureValue);
    if (plantNeedsWater) {
      Serial.println(F(" - PLANTS NEED WATER"));
    } else {
      Serial.println(F(" - Water OK"));
    }
    lastMoistureValue = moistureValue;
  }
}

void changeState(int newState) {
  // Only change state if it's different
  if (robotState != newState) {
    robotState = newState;
    lastStateChangeTime = millis();
    
    printElapsedTime();
    Serial.println(F("================================================="));
    printElapsedTime();
    Serial.print(F("********** STATE CHANGE: "));
    
    switch (robotState) {
      case STATE_WAITING_FOR_CAMERA: 
        Serial.println(F("WAITING FOR CAMERA **********"));
        break;
      case STATE_IDLE:               
        Serial.println(F("IDLE **********"));
        break;
      case STATE_MOVING:             
        Serial.println(F("MOVING **********"));
        break;
      case STATE_APPROACHING_PERSON: 
        Serial.println(F("APPROACHING PERSON **********"));
        break;
      default:
        Serial.println(F("UNKNOWN **********"));
        break;
    }
  }
}

void moveForward() {
  // Only stop if person is detected AND approaching is complete
  if (personDetected && approachingComplete) {
    moveStop();
    return;
  }
  
  if (!goesForward) {
    goesForward = true;
    
    motor1.setSpeed(200); motor1.run(FORWARD);
    motor2.setSpeed(200); motor2.run(FORWARD);
    motor3.setSpeed(200); motor3.run(FORWARD);
    motor4.setSpeed(200); motor4.run(BACKWARD);
  }
}

void moveBackward() {
  goesForward = false;
  
  motor1.setSpeed(200); motor1.run(BACKWARD);
  motor2.setSpeed(200); motor2.run(BACKWARD);
  motor3.setSpeed(200); motor3.run(BACKWARD);
  motor4.setSpeed(200); motor4.run(FORWARD);
}

void turnRight() {
  goesForward = false;
  
  motor1.setSpeed(200); motor1.run(BACKWARD);
  motor2.setSpeed(200); motor2.run(FORWARD);
  motor3.setSpeed(200); motor3.run(FORWARD);
  motor4.setSpeed(200); motor4.run(FORWARD);
  
  // Only auto-forward if not in approaching state
  if (robotState != STATE_APPROACHING_PERSON) {
    delay(TURN_DELAY);
    moveForward();
  }
}

void turnLeft() {
  goesForward = false;
  
  motor1.setSpeed(200); motor1.run(FORWARD);
  motor2.setSpeed(200); motor2.run(BACKWARD);
  motor3.setSpeed(200); motor3.run(BACKWARD);
  motor4.setSpeed(200); motor4.run(BACKWARD);
  
  // Only auto-forward if not in approaching state
  if (robotState != STATE_APPROACHING_PERSON) {
    delay(TURN_DELAY);
    moveForward();
  }
}

void moveStop() {
  goesForward = false;
  
  motor1.setSpeed(0); motor1.run(RELEASE);
  motor2.setSpeed(0); motor2.run(RELEASE);
  motor3.setSpeed(0); motor3.run(RELEASE);
  motor4.setSpeed(0); motor4.run(RELEASE);
}
